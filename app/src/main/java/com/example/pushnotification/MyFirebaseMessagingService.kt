package com.example.pushnotification

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.PendingIntent.FLAG_UPDATE_CURRENT
import android.content.Context
import android.content.Intent
import android.os.Build
import android.widget.RemoteViews
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage
import com.google.firebase.messaging.ktx.remoteMessage
import java.util.Date.from

class MyFirebaseMessagingService : FirebaseMessagingService() {

    //    ->ÌÜ†ÌÅ∞ÏùÄ ÍµâÏû•Ìûà ÏûêÏ£º Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏùå. (ÏÇ≠Ï†ú Î∞è Ïû¨ÏÑ§Ïπò, ÏÉàÍ∏∞Í∏∞ÏóêÏÑú Î≥µÏõê, Îç∞Ïù¥ÌÑ∞ ÏÜåÍ±∞)
//    -> onNewTokenÏùÑ overriding ÏùÑÌÜµÌï¥ ÌÜ†ÌÅ∞ Í∞±Ïã†ÌïÑÏöî
    override fun onNewToken(p0: String) {
        super.onNewToken(p0)
    }

    //Î©îÏãúÏßÄ ÏàòÏã†Ìï† ÎïåÎßàÎã§ Ìò∏Ï∂ú Î©îÏÜåÎìú-> manifestÏóê Ï∂îÍ∞Ä
    override fun onMessageReceived(remotemessage: RemoteMessage) {
        super.onMessageReceived(remotemessage)

        createNotificationChannel() //Ï±ÑÎÑêÎßåÎì§Í∏∞


        val type = remotemessage.data["type"]
                ?.let {
                    NotificationType.valueOf(it)
                }
        val title = remotemessage.data["title"]
        val message = remotemessage.data["message"]

        type ?: return //ÌÉÄÏûÖÏù¥ ÎÑêÏùº Í≤ΩÏö∞ ÏïåÎ¶ºÏÉùÏÑ± X


        //ÏïåÎ¶º Notify
        NotificationManagerCompat.from(this)
                .notify(type.id, createNotification(type, title, message))
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {//Ïò§Î†àÏò§ Ïù¥ÏÉÅÏùº Í≤ΩÏö∞ Ï±ÑÎÑêÏùÑ ÎßåÎì§Ïñ¥Ï§å
            val channel = NotificationChannel(// (id,name, Ï§ëÏöîÎèÑ)
                    CHANNEL_ID,
                    CHANNEL_NAME,
                    NotificationManager.IMPORTANCE_DEFAULT
            )


            channel.description = CHANNEL_DESCRIPTION

            (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager)
                    .createNotificationChannel(channel)
        }
    }
    //ÏïåÎ¶ºÏª®ÌÖêÏ∏†(ÎπåÎçîÏóêÏÑú ÏÑ§Ï†ï)
    private fun createNotification(
            type : NotificationType,
            title: String?,
            message: String?
    ): Notification { //ÌÉÄÏûÖ,ÌÉÄÏù¥ÌãÄ,Î©îÏãúÏßÄ

        val intent = Intent(this, MainActivity::class.java).apply {
            putExtra("notificationType","${type.title} ÌÉÄÏûÖ")
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)// Í∞ôÏùÄ Í≤å ÏûàÏùÑ Í≤ΩÏö∞ ÌïòÎÇòÎßå ÏÉùÍπÄ(OnNewIntentÎ©îÏÑúÎìú Ìò∏Ï∂ú) Í∏∞Ï°¥ ÌôîÎ©¥ Í∞±Ïã†. ÎòëÍ∞ôÏùÄ ÌôîÎ©¥ ÏÉàÎ°ú Ïïà ÏÉùÍπÄ//(ÏûëÏóÖ Î∞è Î∞±Ïä§ÌÉù)
        }

        val pendingIntent = PendingIntent.getActivity(this, type.id, intent, FLAG_UPDATE_CURRENT)//ÎÇ¥Í∞Ä ÏßÅÏ†ëÎã§Î£®Îäî Í≤ÉÏù¥ ÏïÑÎãå ÎàÑÍµ∞Í∞ÄÏóêÍ≤å Ïù∏ÌÖêÌä∏Î•º Ï£ºÎäî Í∂åÌïú
        //pendingIntentÎ•º Ï°∞ÌöåÎ•º Ìï† Îïå ÏïàÏóê Îì§Ïñ¥Í∞ÄÏûàÎäî Îç∞Ïù¥ÌÑ∞Í∞Ä Í∞ôÏùÑ Í≤ΩÏö∞ Í∑∏Í≤ÉÏùÑ Îã§Ïãú Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÏùå. (Í≥ÑÏÜçÏò§Îäî Î©îÏãúÏßÄÍ∞Ä ÎèôÏùºÌïòÎ©¥ pendingIntentÏùÑ Í≥ÑÏÜçÏÉùÏÑ±Ìï¥ÎèÑ ÎèôÏùºÌïú pendingIntent)

        val notificationBuilder =  NotificationCompat.Builder(this, CHANNEL_ID)
                .setSmallIcon(R.drawable.ic_baseline_notifications_24)//ÏïåÎ¶º ÏïÑÏù¥ÏΩò
                .setContentTitle(title)//ÌÉÄÏù¥ÌãÄ Ï†ïÌïòÍ∏∞
                .setContentText(message)//Î©îÏãúÏßÄ Ï†ïÌïòÍ∏∞
                .setPriority(NotificationCompat.PRIORITY_DEFAULT)//Ïö∞ÏÑ†ÏàúÏúÑ
                .setContentIntent(pendingIntent)
                .setAutoCancel(true)


        when(type){
            NotificationType.Normal -> Unit //ÏùºÎ∞òÌòï -> ÏïÑÎ¨¥Í≤ÉÎèÑ Ïïà Ìï®
            NotificationType.EXPANDABLE->{
                //ÌôïÏû•Ìòï -> ÌÅ∞Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä, ÌÅ∞ ÌÖçÏä§Ìä∏Î∏îÎü≠Ï∂îÍ∞Ä, Î∞õÏùÄÌé∏ÏßÄÌï® Ïä§ÌÉÄÏùº, ÎåÄÌôîÌëúÏãú
                notificationBuilder.setStyle(
                        NotificationCompat.BigTextStyle()
                                .bigText(
                                       " üòÄ üòÉ üòÑ üòÅ üòÜ üòÖ üòÇ ü§£ üòá üòâ üòä üôÇ üôÉ ‚ò∫ üòã üòå üòç ü•∞ üòò üòó üòô üòö ü•≤ ü§™ üòú üòù üòõ ü§ë üòé ü§ì "+
                                               "üò£ üòñ üò´ üò© ü•± üò§ üòÆ‚Äçüí® üòÆ üò± üò® üò∞ üòØ üò¶ üòß üò¢ üò• üò™ ü§§ üòì üò≠ ü§© üòµ üòµ‚Äçüí´ ü•¥ üò≤ ü§Ø ü§ê üò∑ ü§ï ü§í ü§Æ ü§¢ ü§ß ü•µ ü•∂ üò∂‚Äçüå´"+
                                               "üò¥ üí§ üòà üëø üëπ üë∫ üí© üëª üíÄ ‚ò† üëΩ ü§ñ üéÉ üò∫ üò∏ üòπ üòª"
                                )
                )
            }
            NotificationType.CUSTOM ->{ //Ïª§Ïä§ÌÖÄÌòï ÏïåÎ¶º Ï∂îÍ∞Ä
                notificationBuilder
                        .setStyle(NotificationCompat.DecoratedCustomViewStyle())
                        .setCustomContentView(
                                RemoteViews(
                                        packageName,
                                        R.layout.view_custom_notification
                                ).apply {
                                    setTextViewText(R.id.title, title)
                                    setTextViewText(R.id.message, message)
                                }
                        )

            }
        }
        return notificationBuilder.build()

    }

    companion object {
        //Ï±ÑÎÑê Ïù¥Î¶Ñ
        private const val CHANNEL_NAME = "Emoji Party"
        private const val CHANNEL_DESCRIPTION = "Emoji PartyÎ•º ÏúÑÌïú Ï±ÑÎÑê"
        private const val CHANNEL_ID = "Channel Id"
    }
}